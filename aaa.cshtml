@model examDotNet.Models.ProduitsViewModel

@{
    ViewData["Title"] = "Catalogue de produits";
}

<div class="container-fluid">
    <h1 class="text-center mb-4">Catalogue de produits</h1>
    
    <div class="row">
        <!-- Section Filtres -->
        <div class="col-md-3">
            <aside class="filters">
                <div class="filters-content card p-3 mb-4">
                    <h2 class="filters-title h4 mb-3">Filtrer les produits</h2>
                    
                    <form id="filter-form" asp-action="Index" method="get">
                        <!-- Recherche -->
                        <div class="filter-section mb-3">
                            <h3 class="h5">Recherche</h3>
                            <div class="search-box input-group">
                                <input type="text" id="search-input" name="searchString" class="form-control" 
                                       placeholder="Rechercher un produit..." value="@Model.SearchString">
                                <button id="search-btn" type="submit" class="btn btn-primary">
                                    <i class="fas fa-search"></i> Rechercher
                                </button>
                            </div>
                        </div>
                        
                        <!-- Catégories -->
                        <div class="filter-section mb-3">
                            <h3 class="h5">Catégories</h3>
                            <ul class="category-list list-unstyled">
                                @foreach (var categorie in Model.Categories)
                                {
                                    <li class="mb-2">
                                        <div class="form-check">
                                            <input type="checkbox" class="form-check-input filter-checkbox" 
                                                   name="categories" value="@categorie" id="cat-@categorie"
                                                   @(Model.CategoriesSelectionnees.Contains(categorie) ? "checked" : "")>
                                            <label class="form-check-label" for="cat-@categorie">@categorie</label>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                        
                        <!-- Disponibilité -->
                        <div class="filter-section mb-3">
                            <h3 class="h5">Disponibilité</h3>
                            <div class="availability-options">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input filter-checkbox" 
                                           name="inStock" value="true" id="in-stock" 
                                           @(Model.EnStockSeulement ? "checked" : "")>
                                    <label class="form-check-label" for="in-stock">En stock seulement</label>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Prix -->
                        <div class="filter-section mb-3">
                            <h3 class="h5">Prix</h3>
                            <div class="price-range">
                                <input type="range" id="price-slider" name="maxPrice" class="form-range" 
                                       min="0" max="@Model.PrixMaxPossible" step="10" value="@Model.PrixMaximum">
                                <div class="price-values d-flex justify-content-between">
                                    <span>0 €</span>
                                    <span id="max-price-display">@Model.PrixMaximum €</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Appliquer les filtres</button>
                            <a href="@Url.Action("Index")" class="btn btn-outline-secondary" id="reset-filters">
                                Réinitialiser les filtres
                            </a>
                        </div>
                    </form>
                </div>
            </aside>
        </div>
        
        <!-- Section Produits -->
        <div class="col-md-9">
            <main class="products">
                <div class="row" id="products-container">
                    @if (Model.Produits.Any())
                    {
                        @foreach (var produit in Model.Produits)
                        {
                            <div class="col-md-4 mb-4">
                                <div class="card product-card h-100">
                                    @if (!string.IsNullOrEmpty(produit.ImagePath))
                                    {
                                        <img src="@produit.ImagePath" class="card-img-top product-img" alt="@produit.NomProduit" 
                                             style="height: 200px; object-fit: cover;">
                                    }
                                    else
                                    {
                                        <img src="~/images/no-image.png" class="card-img-top product-img" alt="Pas d'image" 
                                             style="height: 200px; object-fit: cover;">
                                    }
                                    
                                    <div class="card-body product-text">
                                        <h3 class="card-title product-card-title h5">@produit.NomProduit</h3>
                                        <p class="card-text product-card-price">@produit.Prix.ToString("C")</p>
                                        
                                        @if (produit.NbStock <= 0)
                                        {
                                            <p class="text-danger">Stock épuisé</p>
                                        }
                                    </div>
                                    
                                    <div class="card-footer bg-white border-top-0 product-cart">
                                        <a asp-action="Details" asp-route-slug="@produit.Slug" class="btn btn-primary w-100">
                                            Voir détails
                                        </a>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12">
                            <div class="alert alert-info">
                                Aucun produit ne correspond à vos critères de recherche.
                            </div>
                        </div>
                    }
                </div>
            </main>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Mise à jour de l'affichage du prix maximum sélectionné
        document.addEventListener('DOMContentLoaded', function() {
            const priceSlider = document.getElementById('price-slider');
            const maxPriceDisplay = document.getElementById('max-price-display');
            const filterForm = document.getElementById('filter-form');
            
            if (priceSlider && maxPriceDisplay) {
                // Valeur initiale du slider
                const defaultValue = @Model.PrixMaxPossible;
                
                priceSlider.addEventListener('input', function() {
                    maxPriceDisplay.textContent = this.value + ' €';
                });
                
                // Ne pas soumettre la valeur de prix si elle est égale au maximum
                priceSlider.addEventListener('change', function() {
                    if (parseInt(this.value) === defaultValue) {
                        this.removeAttribute('name');
                    } else {
                        this.setAttribute('name', 'maxPrice');
                    }
                });
            }
            
            // Soumission du formulaire lors du changement des cases à cocher
            const filterCheckboxes = document.querySelectorAll('.filter-checkbox');
            filterCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    // Nettoyage des paramètres inutiles avant la soumission
                    cleanupForm();
                    filterForm.submit();
                });
            });
            
            // Nettoyage des paramètres non utilisés
            function cleanupForm() {
                // Supprime le paramètre searchString s'il est vide
                const searchInput = document.getElementById('search-input');
                if (searchInput && searchInput.value.trim() === '') {
                    searchInput.removeAttribute('name');
                }
                
                // Supprime le paramètre inStock s'il n'est pas coché
                const inStockCheckbox = document.getElementById('in-stock');
                if (inStockCheckbox && !inStockCheckbox.checked) {
                    inStockCheckbox.removeAttribute('name');
                }
                
                // Supprime le paramètre maxPrice s'il est à la valeur maximale
                if (priceSlider && parseInt(priceSlider.value) === defaultValue) {
                    priceSlider.removeAttribute('name');
                }
            }
            
            // Appliquer le nettoyage des paramètres lors de la soumission du formulaire
            if (filterForm) {
                filterForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    cleanupForm();
                    this.submit();
                });
            }
        });
    </script>
}